<?php

namespace app\models;

use Yii;
use yii\db\ActiveRecord;
use yii\behaviors\AttributeBehavior;
use yii\behaviors\TimestampBehavior;
use yii\filters\PageCache;

/**
 * This is the model class for table "activity".
 *
 * @property int $id_activity
 * @property string $activity_name
 * @property string $activity_start_timestamp
 * @property string $activity_end_timestamp
 * @property int $id_user
 * @property string $place
 * @property int $is_important
 * @property string $body
 * @property int $created_at
 * @property int $updated_at
 *
 * @property User $user
 * @property Day[] $days
 */
class Activity extends ActiveRecord
{
    /**   * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'activity';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['activity_name', 'activity_start_timestamp'], 'required'],
            [['activity_start_timestamp', 'activity_end_timestamp'], 'safe'],
            [['id_user', 'is_important', 'created_at', 'updated_at'], 'integer'],
            [['body'], 'string'],
            [['activity_name', 'place'], 'string', 'min' => 3, 'max' => 255],
            [['id_user'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['id_user' => 'id_user']],
            [['activity_end_timestamp'], 'compare', 'compareAttribute' => 'activity_start_timestamp', 'operator' => '>='],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id_activity' => 'Id Activity',
            'activity_name' => 'Название события',
            'activity_start_timestamp' => 'Начало события',
            'activity_end_timestamp' => 'Окончание события',
            'id_user' => 'Пользователь',
            'place' => 'Место',
            'is_important' => 'Важное событие',
            'body' => 'Описание',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id_user' => 'id_user']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDays()
    {
        return $this->hasMany(Day::className(), ['id_activity' => 'id_activity']);
    }

    public function behaviors()
    {
        return [
            'timestamp' => [
                'class' => TimestampBehavior::class
            ],

            'user' => [
                'class' => AttributeBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => 'id_user',
                    ActiveRecord::EVENT_BEFORE_UPDATE => 'id_user',
                ],
                'value' => function($event) {
                    return Yii::$app->user->identity->login === 'admin' ? $this->id_user : Yii::$app->user->identity->id_user;
                }

            ],

            'endDay' => [
                'class' => AttributeBehavior::class,
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => 'activity_end_timestamp',
                    ActiveRecord::EVENT_BEFORE_UPDATE => 'activity_end_timestamp',
                ],
                'value' => function ($event) {
                    return $this->activity_end_timestamp ? $this->activity_end_timestamp : $this->activity_start_timestamp;
                }
            ],


        ];
    }


    public function beforeSave($insert)
    {
        $array = explode('-', $this->activity_start_timestamp);
        $this->activity_start_timestamp = mktime(0,0,0, (int)$array[1], (int)$array[2], (int)$array[0]);

        if ($this->activity_end_timestamp) {
            $array = explode('-', $this->activity_end_timestamp);
            $this->activity_end_timestamp = mktime(0,0,0, (int)$array[1], (int)$array[2], (int)$array[0]);
        }

        return parent::beforeSave($insert);
    }

    public function getPrimaryKey($asArray = false)
    {
        return parent::getPrimaryKey($asArray); // TODO: Change the autogenerated stub
    }


}
